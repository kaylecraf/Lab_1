library(tidyverse)
library(ggplot2)
install.packages("sf")
library(sf)
p.counties <- (/data/County_Boundaries.shp)
p.counties <- "/data/County_Boundaries.shp"
p.stations <- "/data/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
d.counties <- sf::read_sf(p.counties)
p.counties <- "Lab1/data/County_Boundaries.shp"
d.counties <- sf::read_sf(p.counties)
d.stations <- sf::read_sf(p.stations)
p.counties <- "../data/County_Boundaries.shp"
d.counties <- sf::read_sf(p.counties)
p.counties <- "../data/County_Boundaries.shp"
p.stations <- "/data/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
d.counties <- sf::read_sf(p.counties)
d.counties <- sf::read_sf(p.counties)
p.counties <- "./data/County_Boundaries.shp"
d.counties <- sf::read_sf(p.counties)
p.stations <- "./data/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
d.stations <- sf::read_sf(p.stations)
#check validity
d.stations %>% sf::st_is_valid()
d.counties %>% sf::st_is_valid()
d.counties <- d.counties %>% sf::st_make_valid()
d.counties %>% dplyr::select(GEOID10, ALAND10) %>% head()
d.counties %>% dplyr::select(-NAME10) %>% head()
library(tidyverse)
rainfall <- c(1.0, 6.0, 2.0, 2.0, 0.0, 0.0, 3.5,4.0)
rainfall[1]
#find days over 3
rainfall[1] >= 3
#make if-else block
if(rainfall[1] >= 3){print('Big Storm')} else{print("little storm")}
f.storm.test <- function(rainfallAmount){
if(rainfallAmount >= 3){
print('Big Storm')} else{
print("little storm")}}
for(i in rainfall){
f.storm.test(i)
}
#tidy way
rainfall %>% purrr::map(., f.storm.test)
rainfall >= 3
#find the day with the greatest rainfall
max(rainfall)
which(rainfall == max(rainfall))
mydf <- read_csv(".Lab1/data/ne_counties.csv")
mydf <- read_csv("./data/ne_counties.csv")
glimpse(mydf)
max(mydf$MedValHous)
which(mydf$MedValHous == max(mydf$MedValHous))
which(mydf$MedValHous == max(mydf$MedValHous)) %>% mydf[.,]
mydf %>% dplyr::slice_max(MedValHous)
#calculate how much less each household median is compared to the max
newdf <- mydf %>% mutate(deviation = MedValHous - max(MedValHous))
View(newdf)
newdf %>% dplyr::slice_min(deviation)
#plot it
newdf %>% ggplot(., aes(x =deviation)) +
geom_histogram()+
theme_minimal()
#make it nicer
newdf %>% ggplot(., aes(x =deviation)) +
geom_histogram(fill = "pink")+
theme_classic()+
labs(title = "Gay Histogram",
subtitle = "I Love Cats",
x = "Deviation"
y = "Count")
#make it nicer
newdf %>% ggplot(., aes(x =deviation)) +
geom_histogram(fill = "pink")+
theme_classic()+
labs(title = "Gay Histogram",
subtitle = "I Love Cats",
x = "Deviation",
y = "Count")
#make it nicer
newdf %>% ggplot(., aes(x =deviation)) +
geom_histogram(fill = "green")+
theme_classic()+
labs(title = "Gay Histogram",
subtitle = "I Love Cats",
x = "Deviation",
y = "Count")
theme_classic()+
labs(title = "Gay Histogram",
subtitle = "I Love Cats",
x = "Deviation",
y = "Count")
theme_classic()+
labs(title = "Gay Histogram",
subtitle = "I Love Cats",
x = "Deviation",
y = "Count")
newdf %>% ggplot(., aes(x =deviation, y = after_stat(density))) +
geom_histogram(fill = "green")+
geom_vline(xintercept = mean(newdf$deviation), color = "purple", linewidth = 2)+
geom_density(color = "black",linewidth = 1)+
theme_classic()+
labs(title = "Gay Histogram",
subtitle = "I Love Cats",
x = "Deviation",
y = "Count")
newdf %>% ggplot(., aes(x =deviation, y = after_stat(density))) +
geom_histogram(fill = "darkgreen")+
geom_vline(xintercept = mean(newdf$deviation), color = "purple", linewidth = 2)+
geom_density(color = "darkblue",linewidth = 1)+
theme_classic()+
labs(title = "Gay Histogram",
subtitle = "I Love Cats",
x = "Deviation",
y = "Count")
