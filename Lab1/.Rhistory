library(tidyverse)
library(ggplot2)
install.packages("sf")
library(sf)
p.counties <- (/data/County_Boundaries.shp)
p.counties <- "/data/County_Boundaries.shp"
p.stations <- "/data/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
d.counties <- sf::read_sf(p.counties)
p.counties <- "Lab1/data/County_Boundaries.shp"
d.counties <- sf::read_sf(p.counties)
d.stations <- sf::read_sf(p.stations)
p.counties <- "../data/County_Boundaries.shp"
d.counties <- sf::read_sf(p.counties)
p.counties <- "../data/County_Boundaries.shp"
p.stations <- "/data/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
d.counties <- sf::read_sf(p.counties)
d.counties <- sf::read_sf(p.counties)
p.counties <- "./data/County_Boundaries.shp"
d.counties <- sf::read_sf(p.counties)
p.stations <- "./data/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
d.stations <- sf::read_sf(p.stations)
#check validity
d.stations %>% sf::st_is_valid()
d.counties %>% sf::st_is_valid()
d.counties <- d.counties %>% sf::st_make_valid()
d.counties %>% dplyr::select(GEOID10, ALAND10) %>% head()
d.counties %>% dplyr::select(-NAME10) %>% head()
library(tidyverse)
rainfall <- c(1.0, 6.0, 2.0, 2.0, 0.0, 0.0, 3.5,4.0)
rainfall[1]
#find days over 3
rainfall[1] >= 3
#make if-else block
if(rainfall[1] >= 3){print('Big Storm')} else{print("little storm")}
f.storm.test <- function(rainfallAmount){
if(rainfallAmount >= 3){
print('Big Storm')} else{
print("little storm")}}
for(i in rainfall){
f.storm.test(i)
}
#tidy way
rainfall %>% purrr::map(., f.storm.test)
rainfall >= 3
#find the day with the greatest rainfall
max(rainfall)
which(rainfall == max(rainfall))
mydf <- read_csv(".Lab1/data/ne_counties.csv")
mydf <- read_csv("./data/ne_counties.csv")
glimpse(mydf)
max(mydf$MedValHous)
which(mydf$MedValHous == max(mydf$MedValHous))
which(mydf$MedValHous == max(mydf$MedValHous)) %>% mydf[.,]
mydf %>% dplyr::slice_max(MedValHous)
#calculate how much less each household median is compared to the max
newdf <- mydf %>% mutate(deviation = MedValHous - max(MedValHous))
View(newdf)
newdf %>% dplyr::slice_min(deviation)
#plot it
newdf %>% ggplot(., aes(x =deviation)) +
geom_histogram()+
theme_minimal()
#make it nicer
newdf %>% ggplot(., aes(x =deviation)) +
geom_histogram(fill = "pink")+
theme_classic()+
labs(title = "Gay Histogram",
subtitle = "I Love Cats",
x = "Deviation"
y = "Count")
#make it nicer
newdf %>% ggplot(., aes(x =deviation)) +
geom_histogram(fill = "pink")+
theme_classic()+
labs(title = "Gay Histogram",
subtitle = "I Love Cats",
x = "Deviation",
y = "Count")
#make it nicer
newdf %>% ggplot(., aes(x =deviation)) +
geom_histogram(fill = "green")+
theme_classic()+
labs(title = "Gay Histogram",
subtitle = "I Love Cats",
x = "Deviation",
y = "Count")
theme_classic()+
labs(title = "Gay Histogram",
subtitle = "I Love Cats",
x = "Deviation",
y = "Count")
theme_classic()+
labs(title = "Gay Histogram",
subtitle = "I Love Cats",
x = "Deviation",
y = "Count")
newdf %>% ggplot(., aes(x =deviation, y = after_stat(density))) +
geom_histogram(fill = "green")+
geom_vline(xintercept = mean(newdf$deviation), color = "purple", linewidth = 2)+
geom_density(color = "black",linewidth = 1)+
theme_classic()+
labs(title = "Gay Histogram",
subtitle = "I Love Cats",
x = "Deviation",
y = "Count")
newdf %>% ggplot(., aes(x =deviation, y = after_stat(density))) +
geom_histogram(fill = "darkgreen")+
geom_vline(xintercept = mean(newdf$deviation), color = "purple", linewidth = 2)+
geom_density(color = "darkblue",linewidth = 1)+
theme_classic()+
labs(title = "Gay Histogram",
subtitle = "I Love Cats",
x = "Deviation",
y = "Count")
d.counties %>% dplyr::select(GEOID10:CLASSFP10) %>% head()
library(tidyverse)
library(ggplot2)
library(sf)
d.counties %>% dplyr::select(GEOID10:CLASSFP10) %>% head()
d.counties %>% dplyr::select(-NAME10) %>% head()
d.counties %>% dplyr::select(-(GEOID10:CLASSFP10)) %>% head()
#shows columns that have headings that start with C
d.counties %>% dplyr::select(starts_with("C")) %>% head()
#Grouping Stuff
d.counties %>% dplyr::group_by(STATEFP10) %>% head()
#Grouping Stuff
d.counties %>% dplyr::group_by(STATEFP10) %>% glimpse()
#Grouping Stuff
d.counties %>% dplyr::group_by(STATEFP10) %>% mutate(stateLandArea = sum(ALAND10))
#convert to tibble and get the stuff we want
d.counties %>%
as_tibble() %>% dplyr::select(-geometry) %>%
group_by(STATEFP10) %>%
summarise(stateLandArea = sum(ALAND10))
#plots:p
d.counties %>%
ggplot(., aes(x = ALAND10)) +
geom_boxplot(aes((fill = STATEFP10)))
#plots:p
d.counties %>%
ggplot(., aes(x = ALAND10)) +
geom_boxplot(aes(fill = STATEFP10))
#plots:p
d.counties %>%
ggplot(., aes(x = ALAND10, y = ALAND10)) +
geom_boxplot(aes(fill = STATEFP10))
#spatial operations
#look at CRS
d.counties %>% sf::st_crs()
d.stations %>% sf::st_crs()
d.counties %>% sf::st_crs() == d.stations %>% sf::st_crs()
#only counties in delaware
del.counties <- d.counties %>% dplyr::filter(STATEFP10=10)
#only counties in delaware
del.counties <- d.counties %>% dplyr::filter(STATEFP10==10)
del.stations <- sf::st_intersection(d.stations,del.counties)
glimpse(del.stations)
View(d.counties)
#convert to tibble and get the stuff we want
d.counties %>%
as_tibble() %>% dplyr::select(-geometry) %>%
group_by(STATEFP10) %>%
summarise(stateLandArea = sum(ALAND10))
#Task One!!
#1.1
d.counties %>% dplyr::select(STATEFP10,COUNTYFP10, NAME10,ALAND10, AWATER10)
#Grouping Stuff
d.counties %>% dplyr::group_by(STATEFP10) %>% mutate(stateLandArea = sum(ALAND10))
d.counties %>% dplyr::group_by(STATEFP10) %>% mutate(stateArea = sum(ALAND10+AWATER10))
Counties.state.area <- d.counties %>% dplyr::group_by(STATEFP10) %>% mutate(stateArea = sum(ALAND10+AWATER10))
View(Counties.state.area)
#make dataframe that includes state areas
Counties.state.area <- d.counties %>% dplyr::group_by(STATEFP10) %>% mutate(stateArea = sum(ALAND10/(ALAND10+AWATER10)))
View(Counties.state.area)
#make dataframe that includes state areas
Counties.state.area <- d.counties %>% dplyr::group_by(STATEFP10) %>% mutate(stateArea = sum(ALAND10+AWATER10))
Counties.state.area %>%
summarise(ALAND10/stateArea)
#make dataframe that includes state areas
d.counties <- d.counties %>% dplyr::group_by(STATEFP10) %>% mutate(stateArea = sum(ALAND10+AWATER10))
d.counties <- d.counties %>% mutate(LandAreaPrecent = (ALAND10/stateArea))
d.counties <- d.counties %>% mutate(LandAreaPrecent = (ALAND10/stateArea)*100)
#1.2
d.counties <- d.counties %>% mutate(CountyArea = (ALAND10+AWATER10))
d.counties <- d.counties %>% mutate(WaterProp = (AWATER10/CountyArea))
d.counties <- d.counties %>% mutate(WaterProp = (AWATER10/CountyArea)*100)
d.counties <- d.counties %>% mutate(WaterProp = (AWATER10/CountyArea))
d.counties %>% dplyr::group_by(STATEFP10) %>% slice_max(WaterProp)
Max.Water <- d.counties %>% dplyr::group_by(STATEFP10) %>% slice_max(WaterProp)
View(Max.Water)
View(Max.Water)
#1.3
d.counties %>% dplyr::group_by(STATEFP10) %>% dplyr::count()
#1.3
d.counties %>% dplyr::group_by(STATEFP10) %>% dplyr::summarise()
#1.3
d.counties %>% dplyr::group_by(STATEFP10) %>% dplyr::count(STATEFP10)
View(d.stations)
#1.4
d.stations <- d.stations %>% mutate(nchar(STATION_NA))
#1.4
d.stations <- d.stations %>% mutate(length(nchar(STATION_NA)))
#1.4
d.stations <- d.stations %>% mutate(length = (nchar(STATION_NA)))
d.stations %>% slice_min(length)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sf)
library(terra)
library(tidyterra)
library(tmap)
install.packages("tmap")
install.packages("tmap")
library(tidyverse)
library(ggplot2)
library(sf)
#Task One!!
#1.1
d.counties <- d.counties %>% dplyr::group_by(STATEFP10) %>% mutate(stateArea = sum(ALAND10+AWATER10))
